oj <- oj[,1]
t.test(vc, oj, paired=FALSE, var.equal=FALSE)
dose0.5 <- ToothGrowth[ToothGrowth$dose=='0.5',]
dose0.5 <- dose0.5[,1]
print(dose0.5)
t.test(oj, vc, paired=TRUE, data=ToothGrowth)
t.test(oj, vc, paired=FALSE, data=ToothGrowth)
t.test(len,supp,data=ToothGrowth)
t.test(ToothGrowth$len,ToothGrowth$supp,data=ToothGrowth)
t.test(ToothGrowth$len,ToothGrowth$supp)
t.test(ToothGrowth$len,ToothGrowth$supp,paired=FALSE)
t.test(oj, vc, paired=FALSE, data=ToothGrowth
gf
t.test(oj, vc, paired=FALSE, data=ToothGrowth)
t.test(len, supp, paired=FALSE, data=ToothGrowth)
head(ToothGrowth)
t.test(ToothGrowth$len, ToothGrowth$supp, paired=FALSE, data=ToothGrowth)
t.test(ToothGrowth$len, ToothGrowth$dose, paired=FALSE, data=ToothGrowth)
dose0.5 <- ToothGrowth[ToothGrowth$dose=='0.5',]
dose0.5 <- dose0.5[,1]
dose1.0 <- ToothGrowth[ToothGrowth$dose=='1.0',]
dose1.0 <- dose1.0[,1]
dose2.0 <- ToothGrowth[ToothGrowth$dose=='2.0',]
dose2.0 <- dose2.0[,1]
t.test(dose0.5, dose1.0, paired=FALSE, data=ToothGrowth)
print(dose0.5)
print(dose1.0)
print(ToothGrowth)
print(dose0.5)
print(dose1.0)
print(dose2.0)
dose5 <- ToothGrowth[ToothGrowth$dose=='0.5',]
dose5 <- dose5[,1]
dose1 <- ToothGrowth[ToothGrowth$dose=='1.0',]
dose1 <- dose1[,1]
dose2 <- ToothGrowth[ToothGrowth$dose=='2.0',]
dose2 <- dose2[,1]
print(dose5)
print(dose1)
head(ToothGrowth)
print(ToothGrowth)
dose2.0 <- ToothGrowth[ToothGrowth$dose=='2.0',]
print(dose2.0)
dose0.5 <- ToothGrowth[ToothGrowth$dose=='1.0',]
print(dose0.5)
values(ToothGrowth$dose)
value(ToothGrowth$dose)
unique(ToothGrowth$dose)
table <- table(ToothGrowth$len,ToothGrowth$dose)
print(table)
dose1.0 <- ToothGrowth[ToothGrowth$dose=='1',]
dose1.0 <- dose1.0[,1]
print(dose1.0)
dose0.5 <- ToothGrowth[ToothGrowth$dose=='0.5',]
dose0.5 <- dose0.5[,1]
dose1.0 <- ToothGrowth[ToothGrowth$dose=='1',]
dose1.0 <- dose1.0[,1]
dose2.0 <- ToothGrowth[ToothGrowth$dose=='2',]
dose2.0 <- dose2.0[,1]
t.test(dose0.5, dose1.0, paired=FALSE, data=ToothGrowth)
t.test(dose1.0, dose2.0, paired=FALSE, data=ToothGrowth)
t.test(dose0.5, dose2.0, paired=FALSE, data=ToothGrowth)
?mtcars
install.packages("psych")
install.packages("Hmisc")
test <- describe(mtcars)
suppressWarnings(library(psych))
test <- describe(mtcars)
print(test[,1:10])
model1 <- lm(mpg~am,mtcars)
names(summary(model1))
library(AppliedPredictiveModeling)
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
inTrain = CreateDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
inTrain = createDatapartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
library(caret)
install.packages("caret")
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
library(caret)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
?concrete
head(training)
hist(concrete$Superplasticizer)
log(0)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
?AlzheimerDisease
?AlzheimerDisease
head(testing)
ss <- training[,grep('^IL', x = names(training))]
print(ss)
head(ss)
preProc <- preProcess(ss, method='pca', thresh=0.9,
outcome=training$diagnosis)
jg
preProc <- preProcess(ss, method='pca', thresh=0.9, outcome=training$diagnosis)
head(preProc)
preProc$rotation
preProc <- preProcess(ss, method='pca', thresh=0.8, outcome=training$diagnosis)
preProc$rotation
library(pgmm)
install.packages("pgmm")
library(pgmm)
data(olive)
olive=olive[,-1]
treeModel <- train(Area ~ ., data=olive, method="rpart2")
library(caret)
treeModel <- train(Area ~ ., data=olive, method="rpart2")
treemodel
treeModel
newdata <- as.data.frame(t(colMeans(olive)))
predict(treeModel, newdata)
install.packages(ElemStatLearn)
install.package(ElemStatLearn)
install.packages("ElemStatLearn")
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
set.seed(33833)
rf <- train(y ~ ., data = vowel.train, method = "rf", trControl = trainControl(number = 4))
library(caret)
rf <- train(y ~ ., data = vowel.train, method = "rf", trControl = trainControl(number = 4))
rf <- train(y ~ ., data = vowel.train, method = "rf", trControl = trainControl(number = 4))
rf
rffinal <- predict(rf,vowel.test)
confusionMatrix(vowel.test$y,rffinal)$overall['Accuracy']
confusionMatrix(vowel.test$y,rffinal)$overall
confusionMatrix(vowel.test$y,rffinal)
head(vowel.test)
glm <- train(y ~ ., data = vowel.train, method = "glm")
gbm <- train(y ~ ., data = vowel.train, method = "gbm")
gbm <- train(y ~ ., data = vowel.train, method = "gbm")
gbm <- train(y ~ ., data = vowel.train, method = "gbm")
predict2 <- predict(gbm, newdata = vowel.test)
gbm <- train(y ~ ., data = vowel.train, method = "gbm")
gbm <- train(y ~ ., data = vowel.train, method = "gbm")
gbm.result <- predict(gbm, vowel.test)
gbm <- train(y ~ ., data = vowel.train, method = "gbm")
?plot.enet
data(concrete)
library(AppliedPredictiveModeling)
data(concrete)
?plot.enet
install.packages("elasticnet")
library(elasticnet)
?plot.enet
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(233)
lasso.model <- train(CompressiveStrength~., data=training, method="lasso")
plot.enet(lasso.model$finalModel, xvar="penalty", use.color=TRUE)
read.url("http://datapoint.metoffice.gov.uk/public/data/val/wxobs/all/xml/all?res=hourly&key=10673a2a-1970-4deb-8397-7e3b9f075fef")
library(base)
read.url("http://datapoint.metoffice.gov.uk/public/data/val/wxobs/all/xml/all?res=hourly&key=10673a2a-1970-4deb-8397-7e3b9f075fef")
filepath <- "http://datapoint.metoffice.gov.uk/public/data/val/wxobs/all/xml/all?res=hourly&key=10673a2a-1970-4deb-8397-7e3b9f075fef"
data <- read.xml(filepath)
library(XML)
data <- xmlToDataFrame(filepath)
data <- xmlTreeParse(filepath,useInternal=TRUE)
head(data)
data
rootNode <- xmlRoot(data)
xmlName(rootNode)
names(rootNode)
rootNode[[1]]
rootNode[[1]][[1]]
xmlSApply(rootNode,xmlValue)
xmlSApply(rootNode,"//name",xmlValue)
xmlSApply(rootNode,"//Wx",xmlValue)
xmlAttrs(data)
xmlChildren(data)
names(RootNode)
names(rootNode)
rootNode[[1]]
finaldata <- rootnode[[2]]
finaldata <- rootNode[[2]]
weather <- rootNode[[2]]
lookup <- rootNode[[1]]
rootNode2 <- xmlRoot(weather)
rootNode2
xmlToDataFrame(weather)
test <- xmlToDataFrame(weather)
head(test)
test <- xmlToList(weather)
head(test)
test <- xmlParse(weather,asText=TRUE)
test <- xmlParse(weather)
weather[[1]]
weather[[1]][[1]]
weather[[1]][[1]][[1]]
weather[[1]][[1]][[1]][[1]]
test <- xmlToDataFrame(weather[[1]][[1]][[1]])
xmlAttrs(weather[[1]][[1]][[1]])
table$time <- weather[[1]][[1]][[1]][[1]]
table
table <- data.frame(1,1)
table$time <- weather[[1]][[1]][[1]][[1]]
table
table <- data.frame(1,c(time))
table <- data.frame(1,1)
names(table)
names(table <- c("id","time"))
names(table)
names(table) <- c("id","time")
names(table)
table
table <- data.frame(1,1)
names(table) <- c("id","time")
table
table$time <- weather[[1]][[1]][[1]][[1]]
table
test <- weather[[1]][[1]][[1]][[1]]
table$time <- test
table
time <- weather[[1]][[1]][[1]][[1]]
period <- xmlAttrs(weather[[1]][[1]][[1]])
time
period
summary(perios)
summary(period)
period[1,3]
period <- as.data.frame(period)
period
period <- t(period)
period
period[,3]
table <- cbind(period,time)
table
time
time <- as.data.frame(time)
time <- as.numeric(time)
time <- as.string(time)
time <- as.char(time)
time <- as.text(time)
library(xml)
library(XML)
xml<-xmlParse(weather)
result <- as.data.frame(t(xmlSApply(xml["/posts/row"],xmlAttrs)),stringsAsFactors=FALSE)
result <- as.data.frame(t(xmlSApply(xml["/Dv/location/period/rep"],xmlAttrs)),stringsAsFactors=FALSE)
weather[1]
weather[[1]]
result <- as.data.frame(t(xmlSApply(xml["/Dv/Location/Period/Rep"],xmlAttrs)),stringsAsFactors=FALSE)
result <- as.data.frame(t(xmlSApply(weather["/Dv/Location/Period/Rep"],xmlAttrs)),stringsAsFactors=FALSE)
result <- as.data.frame(t(xmlSApply(xml["/Dv/Location/Period/Rep"],xmlAttrs)),stringsAsFactors=FALSE)
result <- as.data.frame(t(xmlSApply(weather["/Dv/Location/Period/Rep"],xmlAttrs)),stringsAsFactors=FALSE)
weather["Location"]
weather["Rep"]
weather["/Rep"]
weather["/Location"]
weather["/Dv"]
weather["/Dv/Location"]
weather["/Dv/Location/Period"]
weather["/Dv/Location/Period/Rep"]
xmlSApply(weather["/Dv/Location/Period/Rep"],xmlAttrs)
xml.text <-
'<?xml version="1.0" encoding="utf-8"?>
<posts>
<row Id="1" PostTypeId="1" AcceptedAnswerId="17" CreationDate="2010-07-26T19:14:18.907" Score="6"/>
<row Id="2" PostTypeId="1" AcceptedAnswerId="17" CreationDate="2010-07-26T19:14:18.907" Score="6"/>
<row Id="3" PostTypeId="1" AcceptedAnswerId="17" CreationDate="2010-07-26T19:14:18.907" Score="6"/>
<row Id="4" PostTypeId="1" AcceptedAnswerId="17" CreationDate="2010-07-26T19:14:18.907" Score="6"/>
</posts>'
library(XML)
xml <- xmlParse(xml.text)
result <- as.data.frame(t(xmlSApply(xml["/posts/row"],xmlAttrs)),
stringsAsFactors=FALSE)
result
xmlSApply(weather["/Dv/Location/Period"],xmlAttrs)
xmlAttrs <- xmlAttrs(weather)
xmlSApply(weather["/Dv/Location/Period/Rep"],xmlAttrs)
xmlAttrs
xmlSApply(weather["/Rep"],xmlAttrs)
xmlAttrs <- xmlAttrs(weather[[1]][[1]])
xmlAttrs
xmlAttrs <- xmlAttrs(weather[[1]][[1]][[1]])
xmlAttrs
xmlSApply(weather["/Rep"],xmlAttrs)
xmlSApply(weather["/Rep"],xmlValue)
xmlSApply(weather["/Dv/Location/Period/Rep"],xmlValue)
timeStamps = t(xpathSApply(weather, '//*[@REP]', function(x) c(name=xmlName(x), xmlAttrs(x))))
timestamps
timeStamps
xmlSApply(weather["/Dv/Location/Period/Rep"],c(xmlAttrs,xmlValue))
xml_top<-xmlRoot(weather)
xml_top
xpathSApply(doc = xml_top, file = "//Dv/Location/Period/Rep", fun = xmlAttrs)
xpathSApply(doc = xml_top, "//Dv/Location/Period", fun = xmlAttrs)
xpathSApply(doc = xml_top, "//Dv/Location/Period", fun = xmlVlaue)
xpathSApply(doc = xml_top, "//Dv/Location/Period", fun = xmlValue)
xml_top
xpathSApply(doc = xml_top, "//Dv/Location/Period/Rep", fun = xmlValue)
xpathSApply(weather, "//Dv/Location/Period/Rep", fun = xmlValue)
xpathSApply(weather, "//Dv/Location/Period", fun = xmlValue)
test <- xpathSApply(weather, "//Dv/Location/Period", fun = xmlValue)
test
weather
test <- xpathSApply(weather, "//Dv/Location/Period", fun = xmlValue)
test
test <- xpathSApply(weather, "//Dv/Location/Period/Rep", fun = xmlValue)
test
test <- xpathSApply(weather, "//Dv/Location/Period/Rep", fun = xmlAttrs)
weather2 <- xmlParse(weather)
weather2 <- xmlTreeParse(weather)
filepath <- "http://datapoint.metoffice.gov.uk/public/data/val/wxobs/all/xml/all?res=hourly&key=10673a2a-1970-4deb-8397-7e3b9f075fef"
library(XML)
data <- xmlTreeParse(filepath,useInternal=TRUE)
weather
saveXML(weather,weather.xml)
saveXML(weather)
saveXML(weather,"weather.xml")
weather
test <- xmlToDataFrame(weather)
test
head(test)
test <- xmlToDataFrame(weather[[1]])
test <- xmlToDataFrame(weather[[1]][[1]])
head(test)
test <- xmlToDataFrame(weather,xmlAttrs)
test <- xmlToDataFrame(weather,xmlValue)
test <- xmlToList(weather)
head(test)
test
ldply(test, function(x) { data.frame(x[!names(x)=="author"]) } )
library(plyr)
ldply(test, function(x) { data.frame(x[!names(x)=="author"]) } )
summary(test)
head(test)
head(test,1)
summary(test)
test[1,1]
test(1)
test(,1)
test[],1]
test[,1]
test[1,]
ldply(test,data.frame)
fileurl2 <- "http://datapoint.metoffice.gov.uk/public/data/val/wxobs/all/xml/3220?res=hourly&key=10673a2a-1970-4deb-8397-7e3b9f075fef"
ellen <- xmlTreeParse(fileurl2,useInternal=TRUE)
ellen
fileurl3 <- "http://datapoint.metoffice.gov.uk/public/data/val/wxobs/all/xml/3220?res=hourly&time=2011-11-10T18Z&key=10673a2a-1970-4deb-8397-7e3b9f075fef"
ellen <- xmlTreeParse(fileurl3,useInternal=TRUE)
ellen <- xmlTreeParse(fileurl2,useInternal=TRUE)
ellen
ellen2 <- xmlToList(ellen)
ellen2
node <- getNodeSet(ellen,'//Rep')
node
rbindlist(lapply(node, function(x) {Rep <- xmlValue(x) data.frame(Rep, t(xpathSApply(x, ".//Rep", xmlAttrs)))}), fill=TRUE)
TestUrl <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
TrainUrl <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
train <-read.csv(TrainUrl, na.strings=c("NA","#DIV/0!",""))
test <-read.csv(TestUrl, na.strings=c("NA","#DIV/0!",""))
head(train)
summary(train)
names(train)
subTrain <- createDataPartition(y=train$classe, p=0.6, list=FALSE)
library(caret)
subTrain <- createDataPartition(y=train$classe, p=0.6, list=FALSE)
nrows(subTrain)
nrow(subTrain)
nrow(train)
test <-read.csv(TestUrl, na.strings=c("NA","#DIV/0!",""))
setwd("~/Coursera/PracticalMachineLearning")
getwd()
getwd()
getwd()
download.file(url = "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv", destfile = './data_train.csv')
inTrain <- createDataPartition(y=train$classe, p=0.6, list=FALSE)
subTrain <- train[inTrain, ]
subTest <- train[-inTrain, ]
nrows(subTrain)
nrow(subTrain)
nrow(subTest)
nrow(train)
set.seed(2210)
fit <- train(classe~., data=subTrain, method="rf", trControl = train_control)
myDataNZV <- nearZeroVar(subtrain, saveMetrics=TRUE)
myDataNZV <- nearZeroVar(subTrain, saveMetrics=TRUE)
training<-subTrain[,-nearZeroVar(subTrain)]
subTrain<-subTrain[,-nearZeroVar(subTrain)]
fit <- train(classe~., data=subTrain, method="rf", trControl = train_control)
fit <- train(classe~., data=subTrain, method="rf")
prediction <- predict(fit, subTrain, type="raw")
c<-confusionMatrix(prediction, subTrain$classe)
nrow(prediction)
summary(fit)
naTrain <- subTrain[rowSums(is.na(subTrain)) > 0,]
nrow(naTrain)
nrow(subTrain)
fit <- train(classe~., data=subTrain, method="rf")
summary(fit)
prediction <- predict(fit, subTrain, type="raw")
head(prediction)
nrow(prediction)
summary(prediction)
summary(subTrain$classe)
nrow(subTrain)
nrow(subTrain)-nrow(naTrain)
fit <- train(classe~., data=subTrain, method="rf",trControl=trainControl(method = "cv", number = 4))
prediction <- predict(fit, subTrain, type="raw")
summary(prediction)
fit <- train(classe~., data=subTrain, method="rf",trControl=trainControl(method = "cv", number = 4),na.omit=FALSE)
prediction <- predict(fit, subTrain, type="raw")
summary(prediction)
library(Hmisc)
test <- impute(subTrain,fun=mean)
nrow(test)
nrow(subTrain)
nrow(subTrain)-nrow(naTrain)
nrow(Train)
nrow(train)
fit <- train(classe~., data=subTrain, method="rf")
fit <- train(classe~., data=test, method="rf")
fit <- train(classe~., data=test, method="rf")
fit <- train(classe~., data=test, method="rf",trControl=trainControl(method = "cv", number = 4),na.omit=FALSE)
summary(fit)
prediction <- predict(fit, subTrain, type="raw")
prediction <- predict(fit, test, type="raw")
summary(test)
summary(subTrain)
test <- impute(subTrain,fun=mean)
summary(test)
head(subTrain,1)
head(test,1)
ellen <- impute(subTrain,fun=mean)
head(ellen,1)
summary(ellen)
subTrain <- subTrain[6:length(subTrain),]
head(subTrain,1)
ncol(subTrain)
length(subTrain)
subTrain <- subTrain[,6:length(subTrain)]
length(subTrain)
head(subtrain,1)
head(subTrain,1)
for (i in 1:length(subTrain) ) {
subTrain[,i] <- impute(subTrain[,i],fun=mean)
}
head(subTrain,1)
fit <- train(classe~., data=subTrain, method="rf",trControl=trainControl(method = "cv", number = 4))
fit <- train(classe~., data=subTrain, method="rf")
subTrain[40:42,]
summary(fit)
train <-read.csv("data_train.csv", na.strings=c("NA","#DIV/0!",""))
test <-read.table("data_test.csv", na.strings=c("NA","#DIV/0!",""))
inTrain <- createDataPartition(y=train$classe, p=0.6, list=FALSE)
subTrain <- train[inTrain, ]
subTest <- train[-inTrain, ]
naTrain <- subTrain[rowSums(is.na(subTrain)) > 0,]
nrow(naTrain)
nrow(subTrain)
subTrain <- subTrain[,6:length(subTrain)]
naTrain <- subTrain[rowSums(is.na(subTrain)) > 0,]
nrow(naTrain)
for (i in 1:length(subTrain) ) {
subTrain[,i] <- impute(subTrain[,i],fun=mean)
}
naTrain <- subTrain[rowSums(is.na(subTrain)) > 0,]
nrow(naTrain)
head(subTrain,5)
subTrain <- subTrain[,3:length(subTrain)]
head(subTrain,5)
fit <- train(classe~., data=subTrain, method="rf",trControl=trainControl(method = "cv", number = 4))
subTrain<-subTrain[,-nearZeroVar(subTrain)]
length(subtrain)
length(subTrain)
fit <- train(classe~., data=subTrain, method="rf",trControl=trainControl(method = "cv", number = 4))
summary(fit)
prediction <- predict(fit, subTest, type="raw")
prediction <- predict(fit, subTrain, type="raw")
length(prediction)
random <- confusionMatrix(prediction, subTrain$classe)
random
prediction <- predict(fit, subTest, type="raw")
random <- confusionMatrix(prediction, subTest$classe)
random
set.seed(1)
train <-read.csv("data_train.csv", na.strings=c("NA","#DIV/0!",""))
test <-read.table("data_test.csv", na.strings=c("NA","#DIV/0!",""))
inTrain <- createDataPartition(y=train$classe, p=0.6, list=FALSE)
subTrain <- train[inTrain, ]
subTest <- train[-inTrain, ]
head(subtrain,3)
head(subTrain,3)
length(subTest)
subTest <- subTest[,8:length(subTest)-1]
length(subTest)
head(subTest,1)
subTest <- subTest[,2:length(subTest)]
length(subTest)
head(subTest,1)
prediction <- predict(fit, subTest, type="raw")
random <- confusionMatrix(prediction, subTest$classe)
